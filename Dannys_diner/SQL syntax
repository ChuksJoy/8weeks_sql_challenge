Schema:
CREATE SCHEMA dannys_diner;
SET search_path = dannys_diner;

CREATE TABLE sales (
  "customer_id" VARCHAR(1),
  "order_date" DATE,
  "product_id" INTEGER
);

INSERT INTO sales
  ("customer_id", "order_date", "product_id")
VALUES
  ('A', '2021-01-01', '1'),
  ('A', '2021-01-01', '2'),
  ('A', '2021-01-07', '2'),
  ('A', '2021-01-10', '3'),
  ('A', '2021-01-11', '3'),
  ('A', '2021-01-11', '3'),
  ('B', '2021-01-01', '2'),
  ('B', '2021-01-02', '2'),
  ('B', '2021-01-04', '1'),
  ('B', '2021-01-11', '1'),
  ('B', '2021-01-16', '3'),
  ('B', '2021-02-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-07', '3');
 

CREATE TABLE menu (
  "product_id" INTEGER,
  "product_name" VARCHAR(5),
  "price" INTEGER
);

INSERT INTO menu
  ("product_id", "product_name", "price")
VALUES
  ('1', 'sushi', '10'),
  ('2', 'curry', '15'),
  ('3', 'ramen', '12');
  

CREATE TABLE members (
  "customer_id" VARCHAR(1),
  "join_date" DATE
);

INSERT INTO members
  ("customer_id", "join_date")
VALUES
  ('A', '2021-01-07'),
  ('B', '2021-01-09');
  
Questions and their Solutions
First let us View our Tables

SELECT *
FROM dannys_diner.menu;
SELECT *
FROM dannys_diner.sales;
SELECT *
FROM dannys_diner.members;

-- 1. What is the total amount each customer spent at the restaurant?

**Query #1**

    SELECT 
    	customer_id, 
        SUM(price)
    FROM dannys_diner.menu 
    JOIN dannys_diner.sales
    On menu.product_id = sales.product_id
    GROUP BY customer_id;

| customer_id | sum |
| ----------- | --- |
| B           | 74  |
| C           | 36  |
| A           | 76  |

---


-- 2. How many days has each customer visited the restaurant?

**Query #2**

    SELECT customer_id,
    COUNT (distinct (order_date)) 
    FROM  dannys_diner.sales
    GROUP BY customer_id;

| customer_id | count |
| ----------- | ----- |
| A           | 4     |
| B           | 6     |
| C           | 2     |

-- 3. What was the first item from the menu purchased by each customer?

**Query #3**

    With FIRSTPURCHASE AS
    (
    SELECT sales.customer_id, 
           menu.product_name, 
           sales.order_date,
           DENSE_RANK() OVER (PARTITION BY sales.Customer_ID ORDER BY sales.order_date) AS purchase_rank
    FROM dannys_diner.menu
    JOIN dannys_diner.sales
    ON menu.product_id = sales.product_id
    GROUP BY sales.customer_id, menu.product_name, sales.order_date
    )
    SELECT customer_id, product_name
    FROM firstpurchase
    WHERE purchase_rank = 1;

| customer_id | product_name |
| ----------- | ------------ |
| A           | curry        |
| A           | sushi        |
| B           | curry        |
| C           | ramen        |


-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?
**Query #4**

    SELECT menu.product_name, COUNT(sales.product_id) AS most_purchased
     FROM dannys_diner.menu
        JOIN dannys_diner.sales
        ON menu.product_id = sales.product_id
        GROUP BY menu.product_name
    ORDER BY COUNT(sales.product_id) desc
    limit 1;

| product_name | most_purchased |
| ------------ | -------------- |
| ramen        | 8              |


-- 5. Which item was the most popular for each customer?
**Query #5**

    with MostPopular as(
    SELECT sales.customer_id,
    menu.product_name,
    COUNT(*) AS order_count,
    DENSE_RANK() OVER (PARTITION BY sales.customer_id
    ORDER BY COUNT(sales.customer_id)desc) as Rank
     FROM dannys_diner.menu
        JOIN dannys_diner.sales
        ON menu.product_id = sales.product_id
    GROUP BY sales.customer_id,menu.product_name
    )
    SELECT Customer_id,Product_name,order_Count
    FROM MostPopular
    WHERE Rank = 1;

| customer_id | product_name | order_count |
| ----------- | ------------ | ----------- |
| A           | ramen        | 3           |
| B           | ramen        | 2           |
| B           | curry        | 2           |
| B           | sushi        | 2           |
| C           | ramen        | 3           |


-- 6. Which item was purchased first by the customer after they became a member?
**Query #6**
SET search_path = dannys_diner
    WITH First_member_sales AS 
    (
    SELECT customer_id, join_date, order_date, product_id,
    DENSE_RANK() OVER(PARTITION BY customer_id
    ORDER BY order_date) 
    FROM sales s
    JOIN members m
    Using(customer_id)
    WHERE s.order_date >= m.join_date
    )
    
    SELECT customer_id, order_date, product_name 
    FROM First_member_sales 
    JOIN menu
    USING(product_id)
    WHERE dense_rank = 1;

| customer_id | order_date               | product_name |
| ----------- | ------------------------ | ------------ |
| B           | 2021-01-11T00:00:00.000Z | sushi        |
| A           | 2021-01-07T00:00:00.000Z | curry        |


-- 7. Which item was purchased just before the customer became a member?
**Query #7**

    With prior_member_customer_purchase as
    (
    Select  s.customer_id,join_date,order_date,product_id,
    	DENSE_RANK() OVER (PARTITION by s.customer_id ORDER BY s.order_date) 
    From sales s
    Join Menu m
    USING(product_id)
    JOIN Members Mem
    USING(customer_id)
    Where s.order_date < Mem.join_date  
    )
    SELECT customer_id, product_name
    FROM prior_member_customer_purchase
    JOIN menu
    USING(product_id)
    WHERE Dense_Rank = 1;

| customer_id | product_name |
| ----------- | ------------ |
| A           | sushi        |
| A           | curry        |
| B           | curry        |

---

[View on DB Fiddle](https://www.db-fiddle.com/f/2rM8RAnq7h5LLDTzZiRWcd/138)

-- 8. What is the total items and amount spent for each member before they became a member?
**Query #8**

    SELECT s.customer_id, COUNT(DISTINCT s.product_id) AS total_item, SUM(m.price) AS total_sales
    FROM sales s
    JOIN members Mem
    USING(customer_id)
    JOIN menu m
    USING(product_id)
    WHERE S.order_date < mem.join_date
    GROUP BY s.customer_id;

| customer_id | total_item       | total_sales |
| ----------- | ---------------- | ----------- |
| A           | 2                | 25          |
| B           | 2                | 40          |


-- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

WITH Price_points AS
(
SELECT *, 
CASE
WHEN product_id = 1 THEN price * 20
ELSE price * 10
END AS points
FROM dannys_diner.menu
) SELECT S.customer_id, SUM(P.points) AS total_points
FROM price_points AS P
JOIN dannys_diner.sales AS S
ON p.product_id = s.product_id
GROUP BY s.customer_id 
order by total_points desc
;

DataOutput
"customer_id"	"total_points"
"B"	940
"A"	860
"C"	360

-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?

WITH dates AS 
(
   SELECT *, 
      DATEADD(DAY, 6, join_date) AS valid_date, 
      EOMONTH('2021-01-31') AS last_date
   FROM members 
)
SELECT S.Customer_id, 
       SUM(
	   CASE 
	  WHEN m.product_id = 1 THEN m.price*20
	  WHEN S.order_date BETWEEN D.join_date AND D.valid_date THEN m.price*20
	  Else m.price*10
	  END 
	  ) as Points
From Dates AS D
join Sales AS S
On D.customer_id = S.customer_id
Join Menu M
On M.product_id = S.product_id
Where S.order_date < d.last_date
Group by S.customer_id
